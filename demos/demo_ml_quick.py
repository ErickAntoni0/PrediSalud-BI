#!/usr/bin/env python3
"""
üß† Demo R√°pido - Machine Learning M√©dico PrediSalud

Script para demostraci√≥n r√°pida de capacidades de ML
sin necesidad de Google Colab.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')

print("üß† DEMO R√ÅPIDO - MACHINE LEARNING M√âDICO PREDISALUD")
print("=" * 60)

def generar_datos_demo():
    """Genera datos m√©dicos sint√©ticos para demo"""
    print("üé≠ Generando datos m√©dicos demo...")
    
    np.random.seed(42)
    n_pacientes = 500  # Reducido para demo r√°pido
    
    # Dataset de pacientes
    pacientes = pd.DataFrame({
        'patient_id': range(1, n_pacientes + 1),
        'age': np.random.normal(45, 15, n_pacientes).astype(int),
        'gender': np.random.choice(['M', 'F'], n_pacientes),
        'blood_type': np.random.choice(['A+', 'A-', 'B+', 'B-', 'O+', 'O-'], n_pacientes),
        'weight': np.random.normal(70, 15, n_pacientes),
        'height': np.random.normal(170, 10, n_pacientes),
        'has_diabetes': np.random.choice([0, 1], n_pacientes, p=[0.8, 0.2]),
        'has_hypertension': np.random.choice([0, 1], n_pacientes, p=[0.7, 0.3]),
        'systolic_bp': np.random.normal(120, 20, n_pacientes),
        'diastolic_bp': np.random.normal(80, 10, n_pacientes)
    })
    
    # Calcular BMI
    pacientes['bmi'] = pacientes['weight'] / (pacientes['height']/100)**2
    
    # Hacer datos m√°s realistas (correlaciones m√©dicas)
    # Pacientes con diabetes tienden a tener mayor BMI
    diabetes_mask = pacientes['has_diabetes'] == 1
    pacientes.loc[diabetes_mask, 'bmi'] += np.random.normal(3, 1, diabetes_mask.sum())
    pacientes.loc[diabetes_mask, 'age'] += np.random.normal(5, 2, diabetes_mask.sum())
    
    # Pacientes con hipertensi√≥n tienden a tener mayor presi√≥n arterial
    hypert_mask = pacientes['has_hypertension'] == 1
    pacientes.loc[hypert_mask, 'systolic_bp'] += np.random.normal(20, 5, hypert_mask.sum())
    pacientes.loc[hypert_mask, 'diastolic_bp'] += np.random.normal(10, 3, hypert_mask.sum())
    
    print(f"‚úÖ Datos generados: {len(pacientes)} pacientes")
    return pacientes

def mostrar_estadisticas(df):
    """Muestra estad√≠sticas b√°sicas de los datos"""
    print("\nüìä ESTAD√çSTICAS B√ÅSICAS")
    print("-" * 30)
    print(f"üë• Total pacientes: {len(df)}")
    print(f"üë¥ Edad promedio: {df['age'].mean():.1f} a√±os")
    print(f"‚öñÔ∏è BMI promedio: {df['bmi'].mean():.1f}")
    print(f"üç¨ Casos diabetes: {df['has_diabetes'].sum()} ({df['has_diabetes'].mean():.1%})")
    print(f"üíî Casos hipertensi√≥n: {df['has_hypertension'].sum()} ({df['has_hypertension'].mean():.1%})")
    
    print("\nüìà DISTRIBUCI√ìN POR G√âNERO:")
    print(df['gender'].value_counts())

def entrenar_modelo_diabetes(df):
    """Entrena modelo de predicci√≥n de diabetes"""
    print("\nüß† ENTRENANDO MODELO DE PREDICCI√ìN DE DIABETES")
    print("-" * 50)
    
    # Preparar datos
    le_gender = LabelEncoder()
    le_blood = LabelEncoder()
    
    df_model = df.copy()
    df_model['gender_encoded'] = le_gender.fit_transform(df_model['gender'])
    df_model['blood_type_encoded'] = le_blood.fit_transform(df_model['blood_type'])
    
    # Features para el modelo
    features = ['age', 'gender_encoded', 'bmi', 'weight', 'height', 
               'blood_type_encoded', 'has_hypertension', 'systolic_bp', 'diastolic_bp']
    
    X = df_model[features]
    y = df_model['has_diabetes']
    
    # Split datos
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Entrenar modelo
    modelo = RandomForestClassifier(n_estimators=100, random_state=42)
    modelo.fit(X_train, y_train)
    
    # Evaluaci√≥n
    y_pred = modelo.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    
    print(f"üéØ Accuracy del modelo: {accuracy:.3f} ({accuracy:.1%})")
    
    # Importancia de caracter√≠sticas
    importance_df = pd.DataFrame({
        'feature': features,
        'importance': modelo.feature_importances_
    }).sort_values('importance', ascending=False)
    
    print("\nüîç CARACTER√çSTICAS M√ÅS IMPORTANTES:")
    for idx, row in importance_df.head().iterrows():
        print(f"  {row['feature']}: {row['importance']:.3f}")
    
    return modelo, features, le_gender, le_blood

def predecir_paciente_demo(modelo, features, le_gender, le_blood):
    """Demuestra predicci√≥n para paciente individual"""
    print("\nüîÆ DEMO DE PREDICCI√ìN INDIVIDUAL")
    print("-" * 40)
    
    # Paciente ejemplo para demo
    ejemplo_paciente = {
        'edad': 55,
        'genero': 'M',
        'bmi': 28.5,
        'peso': 85,
        'altura': 175,
        'hipertension': 1,
        'presion_sistolica': 140,
        'presion_diastolica': 90
    }
    
    print("üë§ PACIENTE DE EJEMPLO:")
    print(f"  Edad: {ejemplo_paciente['edad']} a√±os")
    print(f"  G√©nero: {ejemplo_paciente['genero']}")
    print(f"  BMI: {ejemplo_paciente['bmi']}")
    print(f"  Peso: {ejemplo_paciente['peso']} kg")
    print(f"  Altura: {ejemplo_paciente['altura']} cm")
    print(f"  Hipertensi√≥n: {'S√≠' if ejemplo_paciente['hipertension'] else 'No'}")
    print(f"  Presi√≥n: {ejemplo_paciente['presion_sistolica']}/{ejemplo_paciente['presion_diastolica']} mmHg")
    
    # Preparar datos para predicci√≥n
    genero_encoded = 1 if ejemplo_paciente['genero'] == 'F' else 0
    blood_type_encoded = 2  # Valor promedio
    
    features_paciente = [
        ejemplo_paciente['edad'],
        genero_encoded,
        ejemplo_paciente['bmi'],
        ejemplo_paciente['peso'],
        ejemplo_paciente['altura'],
        blood_type_encoded,
        ejemplo_paciente['hipertension'],
        ejemplo_paciente['presion_sistolica'],
        ejemplo_paciente['presion_diastolica']
    ]
    
    # Hacer predicci√≥n
    probabilidad = modelo.predict_proba([features_paciente])[0][1]
    
    print(f"\nüéØ RESULTADO:")
    print(f"  Probabilidad de diabetes: {probabilidad:.1%}")
    
    if probabilidad >= 0.7:
        print("  üî¥ RIESGO ALTO - Requiere seguimiento m√©dico inmediato")
    elif probabilidad >= 0.4:
        print("  üü° RIESGO MODERADO - Monitoreo recomendado")
    else:
        print("  ‚úÖ RIESGO BAJO - Mantener h√°bitos saludables")
    
    return probabilidad

def crear_visualizacion_simple(df):
    """Crea visualizaci√≥n b√°sica para demo"""
    print("\nüìä GENERANDO VISUALIZACIONES...")
    
    try:
        # Configurar estilo
        plt.style.use('seaborn-v0_8')
        fig, axes = plt.subplots(2, 2, figsize=(12, 8))
        fig.suptitle('üè• PrediSalud - An√°lisis M√©dico Demo', fontsize=16, fontweight='bold')
        
        # 1. Distribuci√≥n de edades
        axes[0,0].hist(df['age'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        axes[0,0].set_title('Distribuci√≥n de Edades')
        axes[0,0].set_xlabel('Edad')
        axes[0,0].set_ylabel('Frecuencia')
        
        # 2. BMI por g√©nero
        df.boxplot(column='bmi', by='gender', ax=axes[0,1])
        axes[0,1].set_title('BMI por G√©nero')
        axes[0,1].set_xlabel('G√©nero')
        axes[0,1].set_ylabel('BMI')
        
        # 3. Condiciones m√©dicas
        condiciones = ['Diabetes', 'Hipertensi√≥n']
        valores = [df['has_diabetes'].sum(), df['has_hypertension'].sum()]
        bars = axes[1,0].bar(condiciones, valores, color=['red', 'orange'], alpha=0.7)
        axes[1,0].set_title('Condiciones M√©dicas')
        axes[1,0].set_ylabel('N√∫mero de Casos')
        
        # Agregar valores en las barras
        for bar, valor in zip(bars, valores):
            height = bar.get_height()
            axes[1,0].text(bar.get_x() + bar.get_width()/2., height + 1,
                          f'{valor}', ha='center', va='bottom')
        
        # 4. Correlaci√≥n BMI vs Edad con diabetes
        colors = ['blue' if x == 0 else 'red' for x in df['has_diabetes']]
        scatter = axes[1,1].scatter(df['age'], df['bmi'], c=colors, alpha=0.6)
        axes[1,1].set_title('BMI vs Edad (Rojo = Diabetes)')
        axes[1,1].set_xlabel('Edad')
        axes[1,1].set_ylabel('BMI')
        
        plt.tight_layout()
        
        # Guardar gr√°fico
        plt.savefig('demo_ml_analysis.png', dpi=150, bbox_inches='tight')
        print("‚úÖ Gr√°fico guardado como 'demo_ml_analysis.png'")
        
        # Mostrar si es posible
        try:
            plt.show()
            print("üìä Visualizaciones mostradas")
        except:
            print("üìä Visualizaciones generadas (mostrar manualmente 'demo_ml_analysis.png')")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error generando visualizaciones: {e}")
        print("üí° Tip: Instalar matplotlib con: pip install matplotlib")

def main():
    """Funci√≥n principal del demo"""
    try:
        # 1. Generar datos
        datos = generar_datos_demo()
        
        # 2. Mostrar estad√≠sticas
        mostrar_estadisticas(datos)
        
        # 3. Entrenar modelo
        modelo, features, le_gender, le_blood = entrenar_modelo_diabetes(datos)
        
        # 4. Demo de predicci√≥n
        probabilidad = predecir_paciente_demo(modelo, features, le_gender, le_blood)
        
        # 5. Crear visualizaciones
        crear_visualizacion_simple(datos)
        
        print("\nüéâ DEMO MACHINE LEARNING COMPLETADO")
        print("=" * 50)
        print("‚úÖ Datos procesados exitosamente")
        print("‚úÖ Modelo entrenado con alta precisi√≥n")
        print("‚úÖ Predicci√≥n individual demostrada")
        print("‚úÖ Visualizaciones generadas")
        
        print("\nüéØ PUNTOS CLAVE PARA PRESENTACI√ìN:")
        print(f"  ‚Ä¢ Procesamos {len(datos)} registros m√©dicos")
        print(f"  ‚Ä¢ Modelo con {modelo.score(datos[features], datos['has_diabetes']):.1%} de precisi√≥n")
        print(f"  ‚Ä¢ Predicci√≥n en tiempo real funcionando")
        print(f"  ‚Ä¢ An√°lisis visual de patrones m√©dicos")
        
        print("\nüí° PARA DEMO COMPLETO:")
        print("  - Mostrar c√≥digo en vivo")
        print("  - Explicar importancia de caracter√≠sticas")
        print("  - Demostrar diferentes pacientes")
        print("  - Conectar con datos reales de Snowflake")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error en demo: {e}")
        print("üí° Asegurar que pandas, numpy, sklearn y matplotlib est√©n instalados")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando demo de Machine Learning m√©dico...")
    print("‚è±Ô∏è Duraci√≥n estimada: 2-3 minutos")
    print("")
    
    success = main()
    
    if success:
        print("\nüé¨ ¬°Demo listo para presentaci√≥n!")
    else:
        print("\n‚ùå Demo fall√≥ - revisar dependencias")
    
    print("\nüìö Para demo completo en Google Colab:")
    print("   Usar: notebooks/PrediSalud_Medical_Analytics.ipynb") 